///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
#ifndef FORCE_CPP
#define FORCE_CPP
///////////////////////////////////////////////////////////////////////////////
#include "Force.h"
///////////////////////////////////////////////////////////////////////////////
namespace plb {
namespace npfem {
///////////////////////////////////////////////////////////////////////////////
SHAPEOP_INLINE GravityForce::GravityForce(const Vector3& f)
    : f_(f)
{
}
///////////////////////////////////////////////////////////////////////////////
SHAPEOP_INLINE Vector3 GravityForce::get(
    const Matrix3X& /*positions*/, int /*id*/) const
{
    return f_;
}
///////////////////////////////////////////////////////////////////////////////
SHAPEOP_INLINE int GravityForce::getId() const { return -1; }
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
SHAPEOP_INLINE VertexForce::VertexForce(const Vector3& f, int id)
    : f_(f)
    , id_(id)
{
}
///////////////////////////////////////////////////////////////////////////////
SHAPEOP_INLINE Vector3 VertexForce::get(
    const Matrix3X& /*position*/, int id) const
{
    if (id == id_)
        return f_;
    else
        return Vector3::Zero();
}
///////////////////////////////////////////////////////////////////////////////
SHAPEOP_INLINE void VertexForce::setId(int id) { id_ = id; }
///////////////////////////////////////////////////////////////////////////////
SHAPEOP_INLINE void VertexForce::setForce(const Vector3& f) { f_ = f; }
///////////////////////////////////////////////////////////////////////////////
SHAPEOP_INLINE int VertexForce::getId() const { return id_; }
///////////////////////////////////////////////////////////////////////////////
} // namespace npfem
} // namespace plb
///////////////////////////////////////////////////////////////////////////////
#endif // FORCE_CPP
///////////////////////////////////////////////////////////////////////////////